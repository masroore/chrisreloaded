#!/usr/bin/env python
#
# PACS plugin for ChRIS reloaded
#
#  _ __   __ _  ___ ___ 
# | '_ \ / _` |/ __/ __|
# | |_) | (_| | (__\__ \
# | .__/ \__,_|\___|___/
# |_|                   
#
# (c) 2012 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

# import the plugin.py superclass
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../'))
from plugin import Plugin

import datetime as d
import re

class PACS(Plugin):
  '''
  '''
  Plugin.AUTHORS = 'FNNDSC (dev@babyMRI.org)'
  Plugin.TITLE = 'PACS'
  Plugin.CATEGORY = 'PACS'
  Plugin.DESCRIPTION = 'Query and Pull data from your PACS to our ChRIS server.'
  Plugin.DOCUMENTATION = 'http://wiki'
  Plugin.LICENSE = 'Opensource (MIT)'
  Plugin.VERSION = '0.2'
  
  def format(self, mrn, date):
      mrn_name = "allMRN"
      if mrn != "" :
        mrn_name = mrn
      date_name = "allDate"
      if date != "" :
        date_name = date
      return " " + mrn_name + "-" + date_name + ".json"
  
  def finishCommand(self, command, mrn, date):
      if mrn != "" :
        command += " -m " + mrn
      if date != "" :
        command += " -d " + date
      return command
  
  def splitWhiteSpace(self, string):
      # trim white spaces and split on "spaces"
      string = re.split("\s+", string.strip())
      # get rid of potential empty elements
      string = [x for x in string if x]
      return string
  
  def splitDash(self, string):
      # trim white spaces and split on "-"
      string = re.split("\-", string.strip())
      # get rid of potential empty elements
      string = [x for x in string if x]
      return string
  
  def processMRN(self, mrn):
      mrn = self.splitWhiteSpace(mrn)
      return mrn
  
  def processDate(self, date):
      #date period
      if date.find('-') != -1 :
        # trim white spaces and split on "-"
        date = self.splitDash(date)
        # create a list of dates in between if 2 dates provided
        if len(date) == 2:
          # format date for python date
          day_from = d.datetime.strptime(date[0], '%Y%m%d')
          day_to = d.datetime.strptime(date[1], '%Y%m%d')
          # loop through all dates
          date = []
          while day_from <= day_to :
            date.append(day_from.strftime('%Y%m%d'))
            day_from = day_from + d.timedelta(days=1)
      else:
        date = self.splitWhiteSpace(date)
      return date

  def run(self, options):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    print Plugin.TITLE
    print Plugin.VERSION
    
    # Parse simple arguments and start building the command
    command = current_dir + "/query.php  -o " + options.output

    if options.NAME:
      command += " -n " + options.NAME
      
    if options.AETITLE:
      command += " -a " + options.AETITLE
      
    if options.MODALITY:
      command += " -y " + options.MODALITY
      
    if options.STU_DES:
      command += " -u " + options.STU_DES
      
    if options.SER_DES:
      command += " -e " + options.SER_DES
      
    if options.STATION:
      command += " -s " + options.STATION
      
    if options.SERVER_IP:
      command += " -i " + options.SERVER_IP
      
    if options.SERVER_PORT:
      command += " -p " + options.SERVER_PORT
      
    # Pre Process MRN
    list_mrn = []
    if options.MRN:
        list_mrn = self.processMRN(options.MRN)
    
    print "MRN(s) to process "
    print list_mrn
    
    # Pre Process Dates
    list_date = []
    if options.DATE:
        list_date = self.processDate(options.DATE)
    
    print "Date(s) to process "
    print list_date
    
    nb_mrn = len(list_mrn)
    nb_date = len(list_date)
    
    list_json = ""
    # run queries and generate json files
    if nb_mrn >= 2 :
      for mrn in list_mrn :
        if nb_date >= 2 :
          for date in list_date :
            os.system(self.finishCommand(command, mrn, date))
            list_json += self.format(mrn, date)
        else :
            os.system(self.finishCommand(command, mrn, "".join(list_date)))
            list_json += self.format(mrn, "".join(list_date))
    else:
      if nb_date >= 2 :
        for date in list_date :
            os.system(self.finishCommand(command, "".join(list_mrn), date))
            list_json += self.format("".join(list_mrn), date)
      else :
            os.system(self.finishCommand(command, "".join(list_mrn), "".join(list_date)))
            list_json += self.format("".join(list_mrn), "".join(list_date))
    list_json = list_json.strip().replace(" ", ",")
    print list_json
    print current_dir + "/format.php  -o " + options.output + " -l " + list_json
    # use php templates to replace it in js code "on_ready"
    print os.system(current_dir + "/format.php  -o " + options.output + " -l " + list_json)
        
# ENTRYPOINT
if __name__ == "__main__":
  plugin = PACS()
  plugin.add_parameter('Input', Plugin.STRING, '--mrn', action='store', dest='MRN', help='MRN to be pulled (mrn1 mrn2 mrn3 etc.)')
  plugin.add_parameter('Input', Plugin.STRING, '--name', action='store', dest='NAME', help='LAST^FIRST')
  plugin.add_parameter('Input', Plugin.STRING, '--date', action='store', dest='DATE', help='date or datefrom-dateto (YYYYMMDD)')
  plugin.add_parameter('Input', Plugin.STRING, '--aet', action='store', default='AETITLE', dest='AETITLE', help='User AETitle')
  plugin.add_parameter('Advanced', Plugin.STRING, '--modality', action='store', default='MR', dest='MODALITY', help='Server IP')
  plugin.add_parameter('Advanced', Plugin.STRING, '--studesc', action='store', dest='STU_DES', help='Study Description')
  plugin.add_parameter('Advanced', Plugin.STRING, '--serdesc', action='store', dest='SER_DES', help='Series Description')
  plugin.add_parameter('Advanced', Plugin.STRING, '--station', action='store', dest='STATION', help='STATION')
  plugin.add_parameter('Advanced', Plugin.STRING, '--serverip', action='store', default='134.174.12.21', dest='SERVER_IP', help='Server IP')
  plugin.add_parameter('Advanced', Plugin.STRING, '--serverport', action='store', default='104', dest='SERVER_PORT', help='Server Port')
  plugin.launch(sys.argv)
